  -addr-sink-using-gep                                           - Address sinking in CGP using GEPs.
  -aggregate-extracted-args                                      - Aggregate arguments to code-extracted functions
  -aggressive-ext-opt                                            - Aggressive extension optimization
  -align-neon-spills                                             - Align ARM NEON spills in prolog and epilog
  -asm-show-inst                                                 - Emit internal instruction representation to assembly file
  -avoid-speculation                                             - MachineLICM should avoid speculation
  -basicaa-recphi                                                - 
  -bb-vectorize-aligned-only                                     - Only generate aligned loads and stores
  -bb-vectorize-fast-dep                                         - Use a fast instruction dependency analysis
  -bb-vectorize-ignore-target-info                               - Ignore target information
  -bb-vectorize-splat-breaks-chain                               - Replicating one element to a pair breaks the chain
  -bb-vectorize-use-chain-depth                                  - Use the chain depth requirement with target information
  -bounds-checking-single-trap                                   - Use one trap block per function
  -branch-relax-asm-large                                        - branch relax asm
  -check-vmlx-hazard                                             - Check fp vmla / vmls hazard at isel time
  -combine-loads                                                 - Run the load combining pass
  -combiner-alias-analysis                                       - Enable DAG combiner alias-analysis heuristics
  -combiner-global-alias-analysis                                - Enable DAG combiner's use of IR alias analysis
  -combiner-split-load-index                                     - DAG combiner may split indexing from loads
  -combiner-stress-load-slicing                                  - Bypass the profitability model of load slicing
  -combiner-use-tbaa                                             - Enable DAG combiner's use of TBAA
  -commgep-const                                                 - 
  -commgep-inv                                                   - 
  -commgep-speculate                                             - 
  -costmodel-reduxcost                                           - Recognize reduction patterns.
  -da-delinearize                                                - Try to delinearize array references.
  -data-sections                                                 - Emit data into separate sections
  -dfsan-args-abi                                                - Use the argument ABI rather than the TLS ABI
  -dfsan-combine-pointer-labels-on-load                          - Combine the label of the pointer with the label of the data when loading from memory.
  -dfsan-combine-pointer-labels-on-store                         - Combine the label of the pointer with the label of the data when storing in memory.
  -dfsan-preserve-alignment                                      - respect alignment requirements provided by input IR
  -early-live-intervals                                          - Run live interval analysis earlier in the pipeline
  -emulated-tls                                                  - Use emulated TLS model
  -enable-aa-sched-mi                                            - Enable use of AA during MI DAG construction
  -enable-acc-forwarding                                         - Enable vec acc forwarding
  -enable-alu-forwarding                                         - Enable vec alu forwarding
  -enable-andcmp-sinking                                         - Enable sinkinig and/cmp into branches.
  -enable-block-placement-stats                                  - Collect probability-driven block placement stats
  -enable-bsb-sched                                              - 
  -enable-cond-stores-vec                                        - Enable if predication of stores during vectorization.
  -enable-deferred-spilling                                      - Instead of spilling a variable right away, defer the actual code insertion to the end of the allocation. That way the allocator might still find a suitable coloring for this variable because of other evicted variables.
  -enable-fmf-dag                                                - Enable fast-math-flags for DAG nodes
  -enable-fp-mad                                                 - Enable less precise MAD instructions to be generated
  -enable-gen-insn                                               - Generate all instruction with TC
  -enable-global-merge                                           - Enable the global merge pass
  -enable-hexagon-br-prob                                        - Enable branch probability info
  -enable-hexagon-hvx                                            - Enable Hexagon Vector eXtensions
  -enable-hexagon-hvx-double                                     - Enable Hexagon Double Vector eXtensions
  -enable-hexagon-ieee-rnd-near                                  - Generate non-chopped conversion from fp to int.
  -enable-hexagon-memops                                         - Generate V4 MEMOP in code generation for Hexagon target
  -enable-hexagon-sdnode-sched                                   - Enable Hexagon SDNode scheduling
  -enable-if-conversion                                          - Enable if-conversion during vectorization.
  -enable-implicit-null-checks                                   - Fold null checks into faulting memory operations
  -enable-ind-var-reg-heur                                       - Count the induction variable only once when interleaving
  -enable-interleaved-mem-accesses                               - Enable vectorization on interleaved memory accesses in a loop
  -enable-legalize-types-checking                                - 
  -enable-load-pre                                               - 
  -enable-loadstore-runtime-interleave                           - Enable runtime interleaving until load/store ports are saturated
  -enable-local-reassign                                         - Local reassignment can yield better allocation decisions, but may be compile time intensive
  -enable-loop-distribute                                        - Enable the new, experimental LoopDistribution Pass
  -enable-loop-load-elim                                         - Enable the new, experimental LoopLoadElimination Pass
  -enable-loop-versioning-licm                                   - Enable the experimental Loop Versioning LICM pass
  -enable-loopinterchange                                        - Enable the new, experimental LoopInterchange Pass
  -enable-lsr-phielim                                            - Enable LSR phi elimination
  -enable-mem-access-versioning                                  - Enable symbolic stride memory access versioning
  -enable-mips-tail-calls                                        - MIPS: Enable tail calls.
  -enable-misched                                                - Enable the machine instruction scheduling pass.
  -enable-name-compression                                       - Enable name string compression
  -enable-noalias-to-md-conversion                               - Convert noalias attributes to metadata during inlining.
  -enable-non-lto-gmr                                            - Enable the GlobalsModRef AliasAnalysis outside of the LTO pipeline.
  -enable-objc-arc-opts                                          - enable/disable all ARC Optimizations
  -enable-patchpoint-liveness                                    - Enable PatchPoint Liveness Analysis Pass
  -enable-pie                                                    - Assume the creation of a position independent executable.
  -enable-post-misched                                           - Enable the post-ra machine instruction scheduling pass.
  -enable-ppc-extra-toc-reg-deps                                 - Add extra TOC register dependencies
  -enable-ppc-prefetching                                        - disable software prefetching on PPC
  -enable-pre                                                    - 
  -enable-scoped-noalias                                         - 
  -enable-selectiondag-sp                                        - 
  -enable-shrink-wrap                                            - enable the shrink-wrapping pass
  -enable-sign-dependent-rounding-fp-math                        - Force codegen to assume rounding mode can change dynamically
  -enable-subreg-liveness                                        - Enable subregister liveness tracking.
  -enable-tail-merge                                             - 
  -enable-tbaa                                                   - 
  -enable-timing-class-latency                                   - Enable timing class latency
  -enable-unsafe-globalsmodref-alias-results                     - 
  -exhaustive-register-search                                    - Exhaustive Search for registers bypassing the depth and interference cutoffs of last chance recoloring
  -expand-all-fp-mlx                                             - 
  -expensive-combines                                            - Enable expensive instruction combines
  -expose-ppc-andi-glue-bug                                      - expose the ANDI glue bug on PPC
  -extra-vectorizer-passes                                       - Run cleanup optimization passes after vectorization.
  -extract-needand                                               - Require & in extract patterns
  -extract-nosr0                                                 - No extract instruction with offset 0
  -fast-isel                                                     - Enable the "fast" instruction selector
  -ffast-math                                                    - Enable Fast Math processing
  -fixup-byte-word-insts                                         - Change byte and word instructions to larger sizes
  -float-to-int                                                  - Run the float2int (float demotion) pass
  -force-mips-long-branch                                        - MIPS: Expand all branches to long format.
  -function-sections                                             - Emit functions into separate sections
  -funit-at-a-time                                               - Enable IPO. This corresponds to gcc's -funit-at-a-time
  -gcov-exit-block-before-body                                   - 
  -global-isel                                                   - Enable the "global" instruction selector
  -global-merge-group-by-use                                     - Improve global merge pass to look at uses
  -global-merge-ignore-single-use                                - Improve global merge pass to ignore globals only used alone
  -global-merge-on-const                                         - Enable global merge pass on constants
  -global-merge-on-external                                      - Enable global merge pass on external linkage
  -group-functions-by-hotness                                    - Partition hot/cold functions by sections prefix
  -hexagon-align-calls                                           - Insert falign after call instruction for Hexagon target
  -hexagon-bit                                                   - Bit simplification
  -hexagon-commgep                                               - Enable commoning of GEP instructions
  -hexagon-eif                                                   - Enable early if-conversion
  -hexagon-emit-jump-tables                                      - Control jump table emission on Hexagon target
  -hexagon-enable-branch-prediction                              - Enable branch prediction
  -hexagon-expand-condsets                                       - Early expansion of MUX
  -hexagon-extract                                               - Generate "extract" instructions
  -hexagon-gen-pred                                              - Enable conversion of arithmetic operations to predicate instructions
  -hexagon-hwloop-preheader                                      - Add a preheader to a hardware loop if one doesn't exist
  -hexagon-insert                                                - Generate "insert" instructions
  -hexagon-loop-resched                                          - Loop rescheduling
  -hexagon-mux                                                   - Enable converting conditional transfers into MUX instructions
  -hexagon-opt-spill                                             - Optimize spill slots
  -hexagon-packetize-volatiles                                   - Allow non-solo packetization of volatile memory references
  -hexagon-sched-inline-asm                                      - Do not consider inline-asm a scheduling/packetization boundary.
  -hexagon-shrink-frame                                          - Enable stack frame shrink wrapping
  -hoist-cheap-insts                                             - MachineLICM should hoist even cheap instructions
  -hsdr-no-mem                                                   - Do not split loads or stores
  -ifcvt-branch-fold                                             - 
  -incremental-linker-compatible                                 - When used with filetype=obj, emit an object file which can be used with an incremental linker
  -insert-all0                                                   - 
  -insert-const                                                  - 
  -insert-has0                                                   - 
  -insert-timing                                                 - Enable timing of insert generation
  -insert-timing-detail                                          - Enable detailed timing of insert generation
  -join-globalcopies                                             - Coalesce copies that span blocks (default=subtarget)
  -join-liveintervals                                            - Coalesce copies (default=true)
  -join-splitedges                                               - Coalesce copies on split edges (default=subtarget)
  -jump-is-expensive                                             - Do not create extra branches to split comparison logic.
  -liv-reduce                                                    - Reduce live induction variables.
  -loop-distribute-non-if-convertible                            - Whether to distribute into a loop that may not be if-convertible by the loop vectorizer
  -loop-distribute-verify                                        - Turn on DominatorTree and LoopInfo verification after Loop Distribution
  -loop-prefetch-writes                                          - Prefetch write addresses
  -loop-unswitch-with-block-frequency                            - Enable the use of the block frequency analysis to access PGO heuristics to minimize code growth in cold regions.
  -loop-vectorize-with-block-frequency                           - Enable the use of the block frequency analysis to access PGO heuristics minimizing code growth in cold regions and being more aggressive in hot regions.
  -lower-interleaved-accesses                                    - Enable lowering interleaved accesses to intrinsics
  -lowerbitsets-avoid-reuse                                      - Try to avoid reuse of byte array addresses using aliases
  -machine-sink-bfi                                              - Use block frequency info to find successors to sink
  -machine-sink-split                                            - Split critical edges during machine sinking
  -mark-data-regions                                             - Mark code section jump table data regions.
  -mc-relax-all                                                  - When used with filetype=obj, relax all fixups in the emitted object file
   -mextern-sdata                                                 - MIPS: Use gp_rel for data that is not defined by the current object.
  -mgpopt                                                        - Enable gp-relative addressing of mips small data items
  -mips-align-constant-islands                                   - Align constant islands in code
  -mips-constant-islands-no-load-relaxation                      - Don't relax loads to long loads - for testing purposes
  -mips-erase-gp-opnd                                            - Erase GP Operand
  -mips-fix-global-base-reg                                      - Always use $gp as the global base register.
  -mips-load-target-from-got                                     - Load target address from GOT
  -mips-os16                                                     - Compile all functions that don't use floating point as Mips 16
  -mips16-constant-islands                                       - Enable mips16 constant islands.
  -mips16-dont-expand-cond-pseudo                                - Don't expand conditional move related pseudos for Mips 16
  -mips16-hard-float                                             - Enable mips16 hard float.
  -misched-bottomup                                              - Force bottom-up list scheduling
  -misched-cluster                                               - Enable load clustering.
  -misched-cyclicpath                                            - Enable cyclic critical path analysis.
  -misched-fusion                                                - Enable scheduling for macro fusion.
  -misched-postra                                                - Run MachineScheduler post regalloc (independent of preRA sched)
  -misched-regpressure                                           - Enable register pressure scheduling.
  -misched-topdown                                               - Force top-down list scheduling
  -mlocal-sdata                                                  - MIPS: Use gp_rel for object-local data.
  -mlsm                                                          - Enable motion of merged load and store
  -mno-check-zero-division                                       - MIPS: Don't trap on integer division by zero.
  -mno-compound                                                  - Disable looking for compound instructions for Hexagon
  -mno-ldc1-sdc1                                                 - Expand double precision loads and stores to their single precision counterparts
  -mno-pairing                                                   - Disable looking for duplex instructions for Hexagon
  -msan-check-access-address                                     - report accesses through a pointer which has poisoned shadow
  -msan-check-constant-shadow                                    - Insert checks for constant shadow values
  -msan-handle-icmp                                              - propagate shadow through ICmpEQ and ICmpNE
  -msan-handle-icmp-exact                                        - exact handling of relational integer ICmp
  -msan-keep-going                                               - keep going after reporting a UMR
  -msan-poison-stack                                             - poison uninitialized stack variables
  -msan-poison-stack-with-call                                   - poison uninitialized stack variables with a call
  -msan-poison-undef                                             - poison undef temps
  -mxgot                                                         - MIPS: Enable GOT larger than 64k.
  -no-discriminators                                             - Disable generation of discriminator information.
  -no-phi-elim-live-out-early-exit                               - Do not use an early exit if isLiveOutPastPHIs returns true.
  -no-stack-coloring                                             - Disable stack coloring
  -no-stack-slot-sharing                                         - Suppress slot sharing during stack coloring
  -no-x86-call-frame-opt                                         - Avoid optimizing x86 call frames for size
  -nozero-initialized-in-bss                                     - Don't place zero-initialized symbols into bss section
  -nvvm-reflect-enable                                           - NVVM reflection, enabled by default
  -old-thumb2-ifcvt                                              - Use old-style Thumb2 if-conversion heuristics
  -only-simple-regions                                           - Show only simple regions in the graphviz viewer
  -optimize-regalloc                                             - Enable optimized register allocation compilation path.
  -outline-optional-branches                                     - Put completely optional branches, i.e. branches with a common post dominator, out of line.
  -pbqp-coalescing                                               - Attempt coalescing during PBQP register allocation.
  -phi-elim-split-all-critical-edges                             - Split all critical edges during PHI elimination
  -post-RA-scheduler                                             - Enable scheduling after register allocation
  -ppc-always-use-base-pointer                                   - Force the use of a base pointer in every function
  -ppc-bit-perm-rewriter-stress-rotates                          - stress rotate selection in aggressive ppc isel for bit permutations
  -ppc-gep-opt                                                   - Enable optimizations on complex GEPs
  -ppc-machine-combiner                                          - Enable the machine combiner pass
  -ppc-track-subreg-liveness                                     - Enable subregister liveness tracking for PPC
  -ppc-use-base-pointer                                          - Enable use of a base pointer for complex stack frames
  -ppc-use-bit-perm-rewriter                                     - use aggressive ppc isel for bit permutations
  -ppc-use-branch-hint                                           - Enable static hinting of branches on ppc
  -precise-rotation-cost                                         - Model the cost of loop rotation more precisely by using profile data.
  -preserve-alignment-assumptions-during-inlining                - Convert align attributes to assumptions during inlining.
  -preserve-bc-uselistorder                                      - Preserve use-list order when writing LLVM bitcode.
  -preserve-ll-uselistorder                                      - Preserve use-list order when writing LLVM assembly.
  -protect-from-escaped-allocas                                  - Do not optimize lifetime zones that are broken
  -qpx-stack-unaligned                                           - Even when QPX is enabled the stack is not 32-byte aligned
  -quiet                                                         - Alias for -q
  -rdf-dump                                                      - 
  -rdf-opt                                                       - Enable RDF-based optimizations
  -relax-nv-checks                                               - Relax checks of new-value validity
  -remat-pic-stub-load                                           - Re-materialize load from stub in PIC mode
  -reroll-loops                                                  - Run the loop rerolling pass
  -rs4gc-allow-statepoint-with-no-deopt-info                     - 
  -rs4gc-clobber-non-live                                        - 
  -run-slp-after-loop-vectorization                              - Run the SLP vectorizer (and BB vectorizer) after the Loop vectorizer instead of before
  -run-twice                                                     - Run all passes twice, re-using the same pass manager.
  -scalarize-load-store                                          - Allow the scalarizer pass to scalarize loads and store
  -scheditins                                                    - Use InstrItineraryData for latency lookup
  -schedmodel                                                    - Use TargetSchedModel for latency lookup
  -schedule-ppc-vsx-fma-mutation-early                           - Schedule VSX FMA instruction mutation early
  -simplifycfg-dup-ret                                           - Duplicate return instructions into unconditional branches
  -simplifycfg-hoist-cond-stores                                 - Hoist conditional stores if an unconditional store precedes
  -simplifycfg-merge-cond-stores                                 - Hoist conditional stores even if an unconditional store does not precede - hoist multiple conditional stores into a single predicated store
  -simplifycfg-merge-cond-stores-aggressively                    - When merging conditional stores, do so even if the resultant basic blocks are unlikely to be if-converted as a result
  -simplifycfg-sink-common                                       - Sink common instructions down to the end block
  -sink-insts-to-avoid-spills                                    - MachineLICM should sink instructions into loops to avoid register spills
  -skip-mips-long-branch                                         - MIPS: Skip long branch pass.
  -slp-vectorize-hor                                             - Attempt to vectorize horizontal reductions
  -slp-vectorize-hor-store                                       - Attempt to vectorize horizontal reductions feeding into a store
  -sparc-reserve-app-registers                                   - Reserve application registers (%g2-%g4)
  -speculate-one-expensive-inst                                  - Allow exactly one expensive instruction to be speculatively executed
  -spp-all-backedges                                             - 
  -spp-no-backedge                                               - 
  -spp-no-call                                                   - 
  -spp-no-entry                                                  - 
  -spp-split-backedge                                            - 
  -sroa-random-shuffle-slices                                    - 
  -sroa-strict-inbounds                                          - 
  -stack-symbol-ordering                                         - Order local stack symbols.
  -stackrealign                                                  - Force align the stack to the minimum alignment
  -std-link-opts                                                 - Include the standard link time optimizations
  -stress-cgp-ext-ld-promotion                                   - Stress test ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare
  -stress-cgp-store-extract                                      - Stress test store(extract) optimizations in CodeGenPrepare
  -stress-early-ifcvt                                            - Turn all knobs to 11
  -tail-dup-verify                                               - Verify sanity of PHI instructions during taildup
  -tailcallopt                                                   - Turn fastcc calls into tail calls by (potentially) changing ABI.
  -terminal-rule                                                 - Apply the terminal rule
  -track-memory                                                  - Enable -time-passes memory tracking (this may be slow)
  -tsan-instrument-atomics                                       - Instrument atomics
  -tsan-instrument-func-entry-exit                               - Instrument function entry and exit
  -tsan-instrument-memintrinsics                                 - Instrument memintrinsics (memset/memcpy/memmove)
  -tsan-instrument-memory-accesses                               - Instrument memory accesses
  -twoaddr-reschedule                                            - Coalesce copies by rescheduling (default=true)
  -unique-section-names                                          - Give unique names to every section
  -unroll-allow-partial                                          - Allows loops to be partially unrolled until -unroll-threshold loop size is reached.
  -unroll-runtime                                                - Unroll loops with run-time trip counts
  -use-allocframe                                                - Use allocframe more conservatively
  -use-cfl-aa                                                    - Enable the new, experimental CFL alias analysis
  -use-cfl-aa-in-codegen                                         - Enable the new, experimental CFL alias analysis in CodeGen
  -use-ctors                                                     - Use .ctors instead of .init_array.
  -use-gvn-after-vectorization                                   - Run GVN instead of Early CSE after vectorization passes
  -use-mbpi                                                      - use Machine Branch Probability Info
  -use-new-sroa                                                  - Enable the new, experimental SROA pass
  -use-segment-set-for-physregs                                  - Use segment set for the computation of the live ranges of physregs.
  -use-tbaa-in-sched-mi                                          - Enable use of TBAA during MI DAG construction
  -vectorize-loops                                               - Run the Loop vectorization passes
  -vectorize-slp                                                 - Run the SLP vectorization passes
  -vectorize-slp-aggressive                                      - Run the BB vectorization passes
  -vectorizer-maximize-bandwidth                                 - Maximize bandwidth when selecting vectorization factor which will be determined by the smallest type in loop.
  -widen-vmovs                                                   - Widen ARM vmovs to vmovd when possible
  -x86-early-ifcvt                                               - Enable early if-conversion on X86
  -x86-experimental-vector-widening-legalization                 - Enable an experimental vector type legalization through widening rather than promotion.
  -x86-machine-combiner                                          - Enable the machine combiner pass
  -x86-use-base-pointer                                          - Enable use of a base pointer for complex stack frames
  -x86-use-vzeroupper                                            - Minimize AVX to SSE transition penalty